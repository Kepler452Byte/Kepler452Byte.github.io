import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as n,o as l}from"./app-WR0bez8k.js";const t={};function e(p,i){return l(),a("div",null,[...i[0]||(i[0]=[n(`<h1 id="【面经】fellou-ai-20250825" tabindex="-1"><a class="header-anchor" href="#【面经】fellou-ai-20250825"><span>【面经】Fellou-AI-20250825</span></a></h1><h2 id="jd调研" tabindex="-1"><a class="header-anchor" href="#jd调研"><span>JD调研</span></a></h2><ol><li><p><a href="https://www.xiaoyuzhoufm.com/episode/680b04ea7a449ae85895ba00" target="_blank" rel="noopener noreferrer">34.与Fellou创始人谢扬的3小时访谈：孤独、95后、牌桌与生产力的完美创业 - 卫诗婕｜商业漫谈Jane&#39;s talk | 小宇宙 - 听播客，上小宇宙</a></p><blockquote><p>Fellou 的四大核心能力：深度行动、主动智能、影子空间、智能体网络</p></blockquote></li><li><p><a href="https://hub.baai.ac.cn/view/45265" target="_blank" rel="noopener noreferrer">https://hub.baai.ac.cn/view/45265</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/1913545774068917177" target="_blank" rel="noopener noreferrer">(99+ 封私信 / 16 条消息) 功能强大的Dia浏览器，可能活不了太久 - 知乎</a></p><blockquote><p>这年头，初创公司的创意，日后都会为巨头们所用。</p><p>不说别的，Arc 浏览器最具特色的竖向标签页+ Pin书签，去年在好几家浏览器上很凑巧地出现了。</p><figure><img src="https://pic3.zhimg.com/v2-596334eb0ddff97dbe5c1d2fac607be6_1440w.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>有只小松鼠在树林里苦苦寻找、试吃各种果子和坚果，摸索哪些能吃、哪些有毒、哪些最有营养。</p><p>而大棕熊坐在树下，眯着眼睛观察。它不着急觅食，它知道：等小松鼠找到了食物，只要走过去，凭体型优势就能接管一切。</p><p>巨头根本不着急做落地产品，他们只需要「 等待-观察-复制 」，由创业公司替其试错，然后坐享其成。</p><p>所以 Dia 面临着：</p><p><strong>它的功能，别人三天就能复刻出来。</strong></p><p><strong>而别人的大模型，它这一辈子，也只能到用用 API 的程度。。。</strong>（目前 Dia 用的是 <a href="https://zhida.zhihu.com/search?content_id=258561728&amp;content_type=Article&amp;match_order=1&amp;q=gpt-4.1&amp;zhida_source=entity" target="_blank" rel="noopener noreferrer">gpt-4.1</a> ）</p><p>那用户有什么理由，放弃原有浏览器，而选择你？</p><p>浏览器，本就是一个护城河太深的领域。Chrome、Edge、Safari 谁家背后没一个大爹？</p><figure><img src="https://pic4.zhimg.com/v2-fce3186e629138caf1a8f24c007a02bd_1440w.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>即便是市场份额低于 1% 的 Others ，他们也有千万、百万级别用户。</p><p>不是喊喊口号，仅靠一些好的想法，拥有一群小众的极客粉丝，就能踏过巨头的护城河，抢夺他们的用户。</p><p>尽管这个 Dia 在保持简洁同时还能精准提高我的生产力，我很喜欢。</p><p><strong>但我真不看好它的未来。（ Arc 浏览器已经停更了 ）</strong></p><p>差友们现在可能用不上 Dia，它还在内测，仅支持 Mac，邀请码少之又少。即便能用上，对网络也有一定的要求。</p><p>但别担心，很快（也可以说现在），你就能在别的浏览器里体验到这些功能。</p></blockquote></li></ol><h2 id="面经" tabindex="-1"><a class="header-anchor" href="#面经"><span>面经</span></a></h2><hr><ol><li><p>AK/SK 的实现</p><ol><li>引入了缓存、在多个节点的情况下怎么保证所有缓存的一致性？ <ul><li>使用消息队列同步</li><li>使用轮询线程，保持与MySQL的启用状态一致</li></ul></li></ol></li><li><p>有没有做多路召回？做RAG的时候文本分块是怎么做的？</p><ul><li><strong>多路召回</strong>：是指同时使用多种检索方式（如关键词、向量、标签过滤等）来获取候选文档，再合并结果，提高覆盖率和召回率。</li><li><strong>RAG中文本分块</strong>：一般将长文本按段落、句子或固定长度（如512-1024 tokens）切分，然后对每个块做向量化或索引，方便检索和生成回答。</li></ul></li><li><p>K8S的组件有哪些 APIServer etcd Node …</p><ol><li><strong>控制平面组件（Control Plane）</strong></li></ol><ul><li><strong>API Server</strong>：所有请求的入口，提供 REST API，用于集群管理。</li><li><strong>etcd</strong>：分布式键值存储，存储集群的状态数据（配置、状态等）。</li><li><strong>Controller Manager</strong>：负责集群中各类控制器，确保实际状态与期望状态一致（如 Deployment、Node）。</li><li><strong>Scheduler</strong>：负责 Pod 调度，把 Pod 分配到合适的 Node 上。</li></ul><hr><ol start="2"><li><strong>节点组件（Node/Worker）</strong></li></ol><ul><li><strong>kubelet</strong>：节点上的核心 agent，负责管理 Pod 生命周期，向 API Server 汇报状态。</li><li><strong>kube-proxy</strong>：实现服务的网络代理和负载均衡。</li><li><strong>Container Runtime</strong>：容器运行时，如 Docker、containerd，用于实际运行容器。</li></ul><hr><p>一句话总结面试用：</p><blockquote><p>Kubernetes 的核心组件包括控制平面的 API Server、etcd、Scheduler、Controller Manager，以及节点上的 kubelet、kube-proxy 和容器运行时。</p></blockquote></li><li><p>redis的布隆过滤器的实现原理？bitmap大小？</p><ol><li>哈希 + bitmap</li></ol><p><strong>原理</strong></p><ol><li><strong>布隆过滤器（Bloom Filter）是一种空间效率很高的概率型数据结构</strong>，用于判断一个元素是否存在集合中。</li><li>它由一个<strong>位数组（bitmap）和多个哈希函数</strong>组成： <ul><li>插入元素时，对元素计算 <code>k</code> 个哈希值，对应位数组的位置置为 1。</li><li>查询元素时，对元素计算同样的 <code>k</code> 个哈希值，如果对应位都是 1，则认为元素可能存在，否则一定不存在。</li></ul></li><li><strong>特点</strong>：可能有 <strong>假阳性</strong>（存在但返回不存在），不会有假阴性。</li></ol><hr><p><strong>Bitmap 大小</strong></p><ul><li>Redis 的 Bloom Filter 实际上是用一个<strong>固定长度的 bitmap</strong>存储的。</li><li>大小通常取决于<strong>预估的元素数量 <code>n</code></strong> 和 <strong>允许的误判率 <code>p</code></strong>，公式如下： <ul><li><strong>位数组大小 m</strong>：<code>m = -(n * ln(p)) / (ln2)^2</code></li><li><strong>哈希函数个数 k</strong>：<code>k = (m / n) * ln2</code></li></ul></li><li>Redis 的 <code>bf.reserve</code> 命令可以直接指定预估元素数量和误判率，内部会自动计算 bitmap 大小和哈希函数数量。</li></ul><hr><p>一句话总结面试用：</p><blockquote><p>Redis 布隆过滤器用一个位数组和多个哈希函数判断元素是否存在，空间效率高，可配置大小和误判率，可能出现假阳性但不会漏报。</p></blockquote></li><li><p><s>为什么要对任务入参做哈希去重，加上时间了之后不是已经唯一了吗？</s></p></li><li><p>互斥锁与排他锁是什么</p><p><strong>互斥锁（Mutex）</strong></p><ul><li>是<strong>操作系统或程序内部的锁</strong>，用于保护<strong>共享资源在同一时间只能被一个线程访问</strong>。</li><li>本质是<strong>线程级别的同步机制</strong>，防止多线程同时操作共享数据导致冲突。</li><li>特点： <ul><li>只在同一进程内生效（不同进程需要其他机制，如信号量）。</li><li>上锁和解锁由程序控制。</li></ul></li></ul><hr><p><strong>排他锁（Exclusive Lock / 写锁）</strong></p><ul><li>是<strong>数据库或文件系统中用于并发控制的锁</strong>，保证<strong>同一资源在锁定期间只能被一个事务或进程修改</strong>。</li><li>本质是<strong>事务级别或进程级别的同步机制</strong>。</li><li>特点： <ul><li>其他事务/进程无法对该资源加读锁或写锁。</li><li>常用于保证数据一致性和防止脏写。</li></ul></li></ul><hr><p><strong>一句话总结</strong></p><blockquote><p>互斥锁用于多线程程序中保护共享内存资源；排他锁用于数据库或文件系统中保证资源在一个事务/进程修改时不被其他人访问。</p></blockquote></li><li><p>有一张表建立了（a, b）联合索引 select a, b from table where a = xxx; 能走到索引吗？（索引下推）</p><ol><li><strong>联合索引 <code>(a, b)</code> 的最左前缀原则</strong>： <ul><li>联合索引能被利用的前提是查询条件包含索引最左边的列。</li><li>比如 <code>(a, b)</code>： <ul><li><code>WHERE a = ?</code> ✅ 可以走索引</li><li><code>WHERE a = ? AND b = ?</code> ✅ 可以走索引</li><li><code>WHERE b = ?</code> ❌ 不走索引</li></ul></li></ul></li><li><strong>这个例子</strong></li></ol><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a, b </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> table</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> xxx;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>条件只涉及索引的最左列 <code>a</code>，所以<strong>可以走联合索引</strong>。</li><li>查询只返回 <code>a, b</code> 两列，也可以走<strong>覆盖索引</strong>（不回表）。</li></ul><blockquote><p><strong>正确的 ICP 示例</strong></p><p>sql</p><ul><li><code>*- 表结构* CREATE TABLE users ( id INT PRIMARY KEY, name VARCHAR(50), age INT, city VARCHAR(50), salary INT, INDEX idx_name_age (name, age) ); *- 会触发 ICP 的查询* SELECT id, name, city, salary FROM users WHERE name = &#39;Alice&#39; AND age &gt; 30;</code></li></ul><p><strong>ICP 工作原理：</strong></p><ol><li><strong>索引能用的部分</strong>：<code>name = &#39;Alice&#39;</code> (精确匹配)</li><li><strong>索引不能完全用的部分</strong>：<code>age &gt; 30</code> (范围查询，但仍在索引列中)</li><li><strong>查询需要的其他列</strong>：<code>city, salary</code> (不在索引中，需要回表)</li></ol><p><strong>ICP 优化过程：</strong></p><p><strong>没有 ICP 时：</strong></p><p><code>1. 用索引找到所有 name=&#39;Alice&#39; 的记录 2. 对每条记录都回表获取完整行数据 3. 在 MySQL Server 层过滤 age &gt; 30</code></p><p><strong>有 ICP 时：</strong></p><p><code>1. 用索引找到所有 name=&#39;Alice&#39; 的记录 2. ✅ 在存储引擎层直接用 age &gt; 30 过滤 3. 只对通过过滤的记录回表获取 city, salary 4. 减少了回表次数</code></p></blockquote></li><li><p>Redis 哨兵模式，有哪些角色？主从同步？RDB AOF 在主从同步中的作用</p><p><strong>Redis 哨兵模式角色</strong></p><p><strong>核心角色：</strong></p><ol><li><strong>Master（主节点）</strong>：处理写请求和读请求</li><li><strong>Slave（从节点）</strong>：只处理读请求，从 Master 同步数据</li><li><strong>Sentinel（哨兵节点）</strong>：监控集群健康状态，执行故障转移</li></ol><p><strong>哨兵职责：</strong></p><ul><li><strong>监控</strong>：定期检查 Master/Slave 是否正常工作</li><li><strong>通知</strong>：当实例故障时通知管理员或客户端</li><li><strong>自动故障转移</strong>：Master 宕机时自动选举新 Master</li><li><strong>配置提供者</strong>：为客户端提供当前 Master 地址</li></ul><p><strong>主从同步机制</strong></p><p><strong>全量同步（第一次）：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>1. Slave 连接 Master，发送 PSYNC 命令</span></span>
<span class="line"><span>2. Master 执行 BGSAVE 生成 RDB 快照</span></span>
<span class="line"><span>3. Master 将 RDB 文件传输给 Slave</span></span>
<span class="line"><span>4. Slave 加载 RDB 文件恢复数据</span></span>
<span class="line"><span>5. Master 将期间的写命令通过复制缓冲区发送给 Slave</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>增量同步（日常）：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>1. Master 将写命令实时发送给 Slave</span></span>
<span class="line"><span>2. Slave 执行这些命令保持数据同步</span></span>
<span class="line"><span>3. 使用复制偏移量（replication offset）确保一致性</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>RDB 和 AOF 在主从同步中的作用</strong></p><p><strong>RDB 作用：</strong></p><ul><li><strong>全量同步的载体</strong>：Master 生成 RDB 快照发送给 Slave</li><li><strong>快速恢复</strong>：Slave 通过加载 RDB 文件快速获得完整数据集</li><li><strong>节省带宽</strong>：相比发送所有历史命令，RDB 更紧凑</li></ul><p><strong>AOF 作用：</strong></p><ul><li><strong>增量同步</strong>：Master 将写命令实时同步给 Slave</li><li><strong>数据一致性保障</strong>：确保 Slave 与 Master 数据完全一致</li><li><strong>断线重连优化</strong>：通过复制缓冲区实现部分重同步</li></ul><p><strong>协同工作：</strong></p><ul><li>RDB 负责<strong>批量数据传输</strong>（全量同步）</li><li>AOF 负责<strong>实时命令同步</strong>（增量同步）</li><li>两者结合保证主从数据的最终一致性</li></ul><blockquote><p><strong>一句话总结</strong></p><p>Redis 哨兵模式通过 Master/Slave/Sentinel 三种角色实现高可用，其中 RDB 负责主从间的全量数据同步，AOF 负责实时命令同步，哨兵负责监控和自动故障转移。</p></blockquote></li><li><p>MySQL 事物的隔离级别，4个，具体指的是什么？</p><blockquote><p><strong>1. 脏读（Dirty Read）</strong></p><p><strong>定义</strong>：读取到其他事务<strong>未提交</strong>的数据</p><p><strong>2. 不可重复读（Non-Repeatable Read）</strong></p><p><strong>定义</strong>：同一事务内，多次读取<strong>同一行数据</strong>结果不一致</p><p><strong>3. 幻读（Phantom Read）</strong></p><p><strong>定义</strong>：同一事务内，多次执行<strong>同一查询条件</strong>，返回的<strong>行数</strong>不一致（出现了&quot;幻影行&quot;）</p></blockquote><p><strong>1. READ UNCOMMITTED（读未提交）</strong></p><p><strong>定义</strong>：可以读取到其他事务未提交的数据</p><p><strong>问题</strong>：会出现脏读、不可重复读、幻读</p><p><strong>实际应用</strong>：几乎不使用，数据一致性最差</p><p><strong>2. READ COMMITTED（读已提交）</strong></p><p><strong>定义</strong>：只能读取到其他事务已提交的数据</p><p><strong>问题</strong>：解决了脏读，但仍有不可重复读、幻读</p><p><strong>实际应用</strong>：Oracle、SQL Server 默认级别</p><p><strong>3. REPEATABLE READ（可重复读）</strong></p><p><strong>定义</strong>：在同一事务内多次读取同一数据结果一致</p><p><strong>问题</strong>：解决了脏读、不可重复读，但理论上仍有幻读（MySQL 的 InnoDB 通过 MVCC + Next-Key Lock 基本解决了幻读）</p><p><strong>实际应用</strong>：<strong>MySQL InnoDB 默认级别</strong></p><p><strong>4. SERIALIZABLE（串行化）</strong></p><p><strong>定义</strong>：事务串行执行，完全隔离</p><p><strong>问题</strong>：解决所有并发问题，但性能最差</p><p><strong>实际应用</strong>：很少使用，除非对数据一致性要求极高</p><table><thead><tr><th><strong>事务隔离级别（Transaction Isolation Level）</strong></th><th><strong>脏读（Dirty Read）</strong></th><th><strong>不可重复读（Non-Repeatable Read）</strong></th><th><strong>幻读（Phantom Read）</strong></th><th><strong>性能表现</strong></th></tr></thead><tbody><tr><td><strong>READ UNCOMMITTED（读未提交）</strong></td><td>✗（允许）</td><td>✗（允许）</td><td>✗（允许）</td><td>最高</td></tr><tr><td><strong>READ COMMITTED（读已提交）</strong></td><td>✓（禁止）</td><td>✗（允许）</td><td>✗（允许）</td><td>较高</td></tr><tr><td><strong>REPEATABLE READ（可重复读）</strong></td><td>✓（禁止）</td><td>✓（禁止）</td><td>✗（允许）*</td><td>较低</td></tr><tr><td><strong>SERIALIZABLE（串行化）</strong></td><td>✓（禁止）</td><td>✓（禁止）</td><td>✓（禁止）</td><td>最低</td></tr></tbody></table><ul><li>注：MySQL InnoDB 在 REPEATABLE READ 级别下通过 MVCC + Next-Key Lock 基本解决了幻读问题</li></ul><blockquote><p><strong>一句话总结</strong></p><p>MySQL 四个事务隔离级别按隔离程度递增：读未提交（性能最高但有脏读）→ 读已提交（解决脏读）→ 可重复读（MySQL 默认，基本解决所有并发问题）→ 串行化（完全隔离但性能最差）。</p></blockquote></li><li><p>怎么防止超卖的问题？LUA脚本？查询库存与预扣减库存是在一个lua脚本中的吗？</p><ul><li><strong>“查询库存” 与 “预扣减库存” 必须放在同一个 Lua 脚本中执行</strong>—— 因为 Redis 会将整个 Lua 脚本作为<strong>单个命令</strong>处理，在脚本执行期间会阻塞其他对该 Redis 键的操作，从而彻底保证 “检查 - 扣减” 的原子性，从根源杜绝超卖。</li><li>Redis 是<strong>单线程处理命令</strong>的（指核心的命令执行模块，网络 IO 是多线程），当执行 Lua 脚本时，Redis 会： <ol><li>暂停处理其他所有命令请求；</li><li>从头到尾执行整个 Lua 脚本（中间不会被打断）；</li><li>脚本执行完成后，再恢复处理其他命令。</li></ol></li><li><strong>不是 “无锁”，而是 “用更优的同步替代显式锁”</strong>： <ul><li>Redis 层面用 “单线程原子脚本” 替代应用层分布式锁；</li><li>MySQL 层面用 “行锁 / 乐观锁” 做最终保障，但只作用于少量请求。</li></ul></li></ul><p>这种 “单线程 + 脚本整体执行” 的特性，确保了 “查询库存” 与 “扣减库存” 不会被并发请求插入，彻底避免超卖。</p></li><li><p><s>你们的MCP Server是怎么做的？</s></p></li></ol><h2 id="手撕" tabindex="-1"><a class="header-anchor" href="#手撕"><span>手撕</span></a></h2><hr><p>合并链表 递归 迭代</p><ul><li>递归</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Solution</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ListNode</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mergeTwoLists</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ListNode</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> l1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ListNode</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> l2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 终止条件：其中一个链表为空，返回另一个</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (l1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l2;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (l2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l1;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 选择值较小的节点作为当前合并节点</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">l1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> l2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 递归合并 l1 的 next 与 l2，结果挂到 l1.next</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            l1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mergeTwoLists</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">l1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, l2);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l1; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 返回当前选中的 l1 作为头节点</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 递归合并 l2 的 next 与 l1，结果挂到 l2.next</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            l2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mergeTwoLists</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(l1, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">l2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l2; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 返回当前选中的 l2 作为头节点</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>迭代</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Solution</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ListNode</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mergeTwoLists</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ListNode</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> l1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ListNode</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> l2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 虚拟头节点：简化边界处理</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ListNode</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dummy</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ListNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ListNode</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> curr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> dummy; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// curr 指向合并链表的当前末尾</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ListNode</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> p1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l1; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 遍历 l1 的指针</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ListNode</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> p2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> l2; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 遍历 l2 的指针</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 遍历两个链表，直到其中一个为空</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (p1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">p1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> p2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                curr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p1; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 接入 p1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                p1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> p1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// p1 后移</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                curr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p2; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 接入 p2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                p2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> p2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// p2 后移</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            curr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> curr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// curr 后移，保持在末尾</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 接入剩余节点（其中一个链表已遍历完）</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        curr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (p1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p2;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> dummy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 返回合并链表的真正头节点</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13)])])}const k=s(t,[["render",e]]),o=JSON.parse(`{"path":"/zh/seeking-job/campus/fellouai-interview-ai-20250825.html","title":"【面经】Fellou-AI-20250825","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-08-25T00:00:00.000Z","category":["求职记录"],"tag":["面经"],"description":"【面经】Fellou-AI-20250825 JD调研 34.与Fellou创始人谢扬的3小时访谈：孤独、95后、牌桌与生产力的完美创业 - 卫诗婕｜商业漫谈Jane's talk | 小宇宙 - 听播客，上小宇宙 Fellou 的四大核心能力：深度行动、主动智能、影子空间、智能体网络 https://hub.baai.ac.cn/view/45265...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【面经】Fellou-AI-20250825\\",\\"image\\":[\\"https://pic3.zhimg.com/v2-596334eb0ddff97dbe5c1d2fac607be6_1440w.jpg\\",\\"https://pic4.zhimg.com/v2-fce3186e629138caf1a8f24c007a02bd_1440w.jpg\\"],\\"datePublished\\":\\"2025-08-25T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-25T13:38:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kepler452Byte\\",\\"url\\":\\"https://kepler452byte.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://kepler452byte.github.io/zh/seeking-job/campus/fellouai-interview-ai-20250825.html"}],["meta",{"property":"og:site_name","content":"Kepler452Byte's Blog"}],["meta",{"property":"og:title","content":"【面经】Fellou-AI-20250825"}],["meta",{"property":"og:description","content":"【面经】Fellou-AI-20250825 JD调研 34.与Fellou创始人谢扬的3小时访谈：孤独、95后、牌桌与生产力的完美创业 - 卫诗婕｜商业漫谈Jane's talk | 小宇宙 - 听播客，上小宇宙 Fellou 的四大核心能力：深度行动、主动智能、影子空间、智能体网络 https://hub.baai.ac.cn/view/45265..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pic3.zhimg.com/v2-596334eb0ddff97dbe5c1d2fac607be6_1440w.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-25T13:38:02.000Z"}],["meta",{"property":"article:tag","content":"面经"}],["meta",{"property":"article:published_time","content":"2025-08-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-25T13:38:02.000Z"}]]},"git":{"createdTime":1756129082000,"updatedTime":1756129082000,"contributors":[{"name":"sx-yuanhong.shao","username":"","email":"sx-yuanhong.shao@clickzetta.com","commits":1}]},"readingTime":{"minutes":12.19,"words":3656},"filePathRelative":"zh/seeking-job/campus/fellouai-interview-ai-20250825.md","excerpt":"\\n<h2>JD调研</h2>\\n<ol>\\n<li>\\n<p><a href=\\"https://www.xiaoyuzhoufm.com/episode/680b04ea7a449ae85895ba00\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">34.与Fellou创始人谢扬的3小时访谈：孤独、95后、牌桌与生产力的完美创业 - 卫诗婕｜商业漫谈Jane's talk | 小宇宙 - 听播客，上小宇宙</a></p>\\n<blockquote>\\n<p>Fellou 的四大核心能力：深度行动、主动智能、影子空间、智能体网络</p>\\n</blockquote>\\n</li>\\n<li>\\n<p><a href=\\"https://hub.baai.ac.cn/view/45265\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://hub.baai.ac.cn/view/45265</a></p>\\n</li>\\n<li>\\n<p><a href=\\"https://zhuanlan.zhihu.com/p/1913545774068917177\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">(99+ 封私信 / 16 条消息) 功能强大的Dia浏览器，可能活不了太久 - 知乎</a></p>\\n<blockquote>\\n<p>这年头，初创公司的创意，日后都会为巨头们所用。</p>\\n<p>不说别的，Arc 浏览器最具特色的竖向标签页+ Pin书签，去年在好几家浏览器上很凑巧地出现了。</p>\\n<figure><img src=\\"https://pic3.zhimg.com/v2-596334eb0ddff97dbe5c1d2fac607be6_1440w.jpg\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<p>有只小松鼠在树林里苦苦寻找、试吃各种果子和坚果，摸索哪些能吃、哪些有毒、哪些最有营养。</p>\\n<p>而大棕熊坐在树下，眯着眼睛观察。它不着急觅食，它知道：等小松鼠找到了食物，只要走过去，凭体型优势就能接管一切。</p>\\n<p>巨头根本不着急做落地产品，他们只需要「 等待-观察-复制 」，由创业公司替其试错，然后坐享其成。</p>\\n<p>所以 Dia 面临着：</p>\\n<p><strong>它的功能，别人三天就能复刻出来。</strong></p>\\n<p><strong>而别人的大模型，它这一辈子，也只能到用用 API 的程度。。。</strong>（目前 Dia 用的是&nbsp;<a href=\\"https://zhida.zhihu.com/search?content_id=258561728&amp;content_type=Article&amp;match_order=1&amp;q=gpt-4.1&amp;zhida_source=entity\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">gpt-4.1</a>&nbsp;）</p>\\n<p>那用户有什么理由，放弃原有浏览器，而选择你？</p>\\n<p>浏览器，本就是一个护城河太深的领域。Chrome、Edge、Safari 谁家背后没一个大爹？</p>\\n<figure><img src=\\"https://pic4.zhimg.com/v2-fce3186e629138caf1a8f24c007a02bd_1440w.jpg\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<p>即便是市场份额低于 1% 的 Others ，他们也有千万、百万级别用户。</p>\\n<p>不是喊喊口号，仅靠一些好的想法，拥有一群小众的极客粉丝，就能踏过巨头的护城河，抢夺他们的用户。</p>\\n<p>尽管这个 Dia 在保持简洁同时还能精准提高我的生产力，我很喜欢。</p>\\n<p><strong>但我真不看好它的未来。（ Arc 浏览器已经停更了 ）</strong></p>\\n<p>差友们现在可能用不上 Dia，它还在内测，仅支持 Mac，邀请码少之又少。即便能用上，对网络也有一定的要求。</p>\\n<p>但别担心，很快（也可以说现在），你就能在别的浏览器里体验到这些功能。</p>\\n</blockquote>\\n</li>\\n</ol>","autoDesc":true}`);export{k as comp,o as data};
