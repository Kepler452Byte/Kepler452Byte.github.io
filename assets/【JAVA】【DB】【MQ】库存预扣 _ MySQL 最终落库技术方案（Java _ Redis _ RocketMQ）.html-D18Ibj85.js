import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as a,d as e,r as t,o as d}from"./app-DtpF1dIL.js";const p={};function r(h,s){const i=t("Mermaid");return d(),l("div",null,[s[0]||(s[0]=a(`<h1 id="【java】【db】【mq】库存预扣-mysql-最终落库技术方案-java-redis-rocketmq" tabindex="-1"><a class="header-anchor" href="#【java】【db】【mq】库存预扣-mysql-最终落库技术方案-java-redis-rocketmq"><span>【JAVA】【DB】【MQ】库存预扣 + MySQL 最终落库技术方案（Java + Redis + RocketMQ）</span></a></h1><aside> 💡 <ol><li>请求提交订单接口与库存预扣减的关系</li></ol><p>在典型的 <strong>Redis 预扣库存 + MySQL 最终落库</strong>架构中：</p><ol><li><strong>用户请求提交订单接口（下单接口）</strong>： <ul><li>是用户触发整个下单流程的入口。</li><li>接口会执行 <strong>库存预扣减</strong>，但不是简单写 Redis，而是有完整业务逻辑和幂等处理。</li></ul></li><li><strong>库存预扣减时机</strong>： <ul><li><strong>在接口内部立即调用 Redis 扣减库存</strong>，保证高并发下库存不被超卖。</li><li>如果 Redis 扣减失败（库存不足），直接返回下单失败。</li></ul></li><li><strong>顺序流程</strong>： <ol><li>用户请求下单接口</li><li>Redis Lua 原子扣减库存 <ul><li>库存不足 → 返回失败</li><li>库存充足 → 扣减成功</li></ul></li><li>生成订单消息 → 发送 RocketMQ</li><li>消费者异步落库 MySQL <ul><li>成功 → 完成</li><li>失败 → 发送回滚消息 → Redis 补库存</li></ul></li></ol></li></ol><hr><p><strong>2. 设计原则</strong></p><ul><li><strong>Redis 扣减库存要在下单接口内立即完成</strong><ul><li>确保并发情况下库存安全</li><li>接口响应时间快（Redis 原子操作很快）</li></ul></li><li><strong>落库是异步的</strong><ul><li>不阻塞接口返回</li><li>通过 MQ 异步保证最终一致性</li></ul></li><li><strong>接口层只负责触发预扣和消息投递</strong><ul><li>业务权威存储仍在 MySQL</li><li>异常回滚、超时释放库存由消费者/定时任务处理</li></ul></li></ul><hr><ol start="3"><li>核心结论</li></ol><p>✅ <strong>用户下单接口确实是库存预扣减的触发点</strong></p><ul><li>下单接口先在 Redis 扣减库存</li><li>然后异步落库 MySQL</li><li>回滚、超时释放库存通过<strong>消息队列或定时任务处理</strong></li></ul></aside><h2 id="_1-背景与场景" tabindex="-1"><a class="header-anchor" href="#_1-背景与场景"><span>1. 背景与场景</span></a></h2><p>在电商秒杀或大促场景中：</p><ul><li>单品库存有限，高并发请求可能瞬间打爆数据库。</li><li>订单生成与库存扣减必须保证一致性，否则可能出现 <strong>超卖/少卖</strong>。</li><li>Redis 提供高性能内存操作，是库存预扣的理想选择，但不适合作为权威数据源。</li></ul><p><strong>目标</strong>：</p><p>通过 Redis 预扣库存削峰、RocketMQ 异步落库 MySQL，实现 <strong>最终一致性</strong>，同时保证系统可靠、可恢复。</p><hr><h2 id="_2-系统架构" tabindex="-1"><a class="header-anchor" href="#_2-系统架构"><span>2. 系统架构</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>┌─────────────┐</span></span>
<span class="line"><span>│  用户请求   │</span></span>
<span class="line"><span>└──────┬──────┘</span></span>
<span class="line"><span>       │</span></span>
<span class="line"><span>       ▼</span></span>
<span class="line"><span>┌─────────────┐</span></span>
<span class="line"><span>│   API 服务   │</span></span>
<span class="line"><span>│  (Java)     │</span></span>
<span class="line"><span>└──────┬──────┘</span></span>
<span class="line"><span>       │</span></span>
<span class="line"><span>       │  1. Redis 预扣库存 (Lua 原子操作)</span></span>
<span class="line"><span>       ▼</span></span>
<span class="line"><span>┌─────────────┐</span></span>
<span class="line"><span>│    Redis     │</span></span>
<span class="line"><span>└──────┬──────┘</span></span>
<span class="line"><span>       │</span></span>
<span class="line"><span>       │  2. 订单消息发送</span></span>
<span class="line"><span>       ▼</span></span>
<span class="line"><span>┌─────────────┐</span></span>
<span class="line"><span>│ RocketMQ MQ │</span></span>
<span class="line"><span>└──────┬──────┘</span></span>
<span class="line"><span>       │</span></span>
<span class="line"><span>       │  3. 消费者落库</span></span>
<span class="line"><span>       ▼</span></span>
<span class="line"><span>┌─────────────┐</span></span>
<span class="line"><span>│   MySQL      │</span></span>
<span class="line"><span>│ (库存 &amp; 订单)│</span></span>
<span class="line"><span>└──────┬──────┘</span></span>
<span class="line"><span>       │</span></span>
<span class="line"><span>       │  4. 失败回滚/补偿</span></span>
<span class="line"><span>       ▼</span></span>
<span class="line"><span>┌─────────────┐</span></span>
<span class="line"><span>│    Redis     │</span></span>
<span class="line"><span>│ (库存修复)  │</span></span>
<span class="line"><span>└─────────────┘</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>流程说明</strong>：</p><ol><li><strong>Redis 预扣库存</strong>：秒杀/下单请求先在 Redis 扣减库存，通过 Lua 脚本保证原子性。</li><li><strong>发送订单消息</strong>：扣减成功后，将订单信息写入 RocketMQ，异步落库。</li><li><strong>MySQL 最终落库</strong>：消费者收到消息后，生成订单记录，同时更新 MySQL 中的真实库存。</li><li><strong>失败回滚与补偿</strong>： <ul><li>消费者落库失败 → 发送回滚消息恢复 Redis 库存。</li><li>用户未支付超时 → 定时任务扫描 Redis &amp; MySQL，释放库存。</li></ul></li></ol><hr><h2 id="_3-核心技术要点" tabindex="-1"><a class="header-anchor" href="#_3-核心技术要点"><span>3. 核心技术要点</span></a></h2><h3 id="_3-1-redis-预扣库存" tabindex="-1"><a class="header-anchor" href="#_3-1-redis-预扣库存"><span>3.1 Redis 预扣库存</span></a></h3><ul><li>使用 Lua 脚本实现“检查库存 → 扣减库存”的原子操作： <ul><li>避免并发下超卖。</li><li>支持多商品批量扣减。</li></ul></li><li>Redis 中只保留临时库存状态，最终库存权威在 MySQL。</li></ul><h3 id="_3-2-rocketmq-异步落库" tabindex="-1"><a class="header-anchor" href="#_3-2-rocketmq-异步落库"><span>3.2 RocketMQ 异步落库</span></a></h3><ul><li>订单消息格式包含： <ul><li>订单号（全局唯一，幂等处理关键）</li><li>用户ID、商品ID、数量</li><li>时间戳、状态</li></ul></li><li>消费者必须幂等： <ul><li>MySQL 订单表建立 <strong>订单号唯一索引</strong></li><li>重复消费消息不会导致重复扣减</li></ul></li></ul><h3 id="_3-3-mysql-最终库存与订单存储" tabindex="-1"><a class="header-anchor" href="#_3-3-mysql-最终库存与订单存储"><span>3.3 MySQL 最终库存与订单存储</span></a></h3><ul><li>订单表与库存表分开： <ul><li>库存表记录真实可用库存</li><li>订单表记录订单详情</li></ul></li><li>落库顺序： <ol><li>生成订单记录</li><li>扣减 MySQL 库存</li><li>更新订单状态（可选：待支付 → 已支付）</li></ol></li></ul><h3 id="_3-4-异常处理与回滚" tabindex="-1"><a class="header-anchor" href="#_3-4-异常处理与回滚"><span>3.4 异常处理与回滚</span></a></h3><ul><li><strong>Redis 回滚</strong>： <ul><li>消费失败 → 增加库存</li><li>用户超时未支付 → TTL 过期或定时任务释放</li></ul></li><li><strong>最终一致性对账</strong>： <ul><li>定时任务比对 Redis 与 MySQL 库存</li><li>Canal 监听 MySQL binlog 修复 Redis 缓存</li></ul></li></ul><hr><h2 id="_4-流程时序" tabindex="-1"><a class="header-anchor" href="#_4-流程时序"><span>4. 流程时序</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>用户请求下单</span></span>
<span class="line"><span>   │</span></span>
<span class="line"><span>   ▼</span></span>
<span class="line"><span>API 服务</span></span>
<span class="line"><span>   ├─ Redis Lua 扣减库存</span></span>
<span class="line"><span>   │     └─ 库存不足 → 返回失败</span></span>
<span class="line"><span>   │</span></span>
<span class="line"><span>   └─ 发送订单消息到 RocketMQ</span></span>
<span class="line"><span>         │</span></span>
<span class="line"><span>         ▼</span></span>
<span class="line"><span>消费者服务</span></span>
<span class="line"><span>   ├─ 落库 MySQL（订单 + 库存扣减）</span></span>
<span class="line"><span>   │     └─ 成功 → 完成</span></span>
<span class="line"><span>   │     └─ 失败 → 发送回滚消息到 Redis</span></span>
<span class="line"><span>         │</span></span>
<span class="line"><span>         ▼</span></span>
<span class="line"><span>Redis 库存回滚 / 定时任务释放库存</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_5-java-rocketmq-方案要点-最佳实践" tabindex="-1"><a class="header-anchor" href="#_5-java-rocketmq-方案要点-最佳实践"><span>5. Java + RocketMQ 方案要点（最佳实践）</span></a></h2><table><thead><tr><th>关键点</th><th>做法</th><th>原因</th></tr></thead><tbody><tr><td>Redis 扣减库存</td><td>Lua 脚本原子操作</td><td>避免超卖，保证高并发下正确性</td></tr><tr><td>消息异步落库</td><td>RocketMQ 生产 + 消费</td><td>解耦业务逻辑，削峰，支持幂等消费</td></tr><tr><td>幂等处理</td><td>订单号唯一索引 + 消费者幂等逻辑</td><td>防止重复消息造成多扣库存</td></tr><tr><td>回滚机制</td><td>消费失败或超时 → Redis <code>INCR</code></td><td>保证 Redis 与 MySQL 最终一致</td></tr><tr><td>数据对账</td><td>Canal + 定时任务</td><td>修复 Redis 缓存，保证一致性</td></tr><tr><td>超时订单处理</td><td>Redis TTL 或定时任务</td><td>避免库存被未支付订单占用</td></tr><tr><td>系统监控</td><td>MQ 消息堆积、库存异常告警</td><td>快速发现异常并处理</td></tr></tbody></table><h2 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结"><span>6. 总结</span></a></h2><ol><li><strong>Redis 只做库存预扣减</strong> → 保证高并发下的库存安全。</li><li><strong>MySQL 做最终库存与订单权威存储</strong> → 财务和结算依赖。</li><li><strong>RocketMQ 异步落库 + 回滚机制</strong> → 保证系统可靠性和最终一致性。</li><li><strong>Lua 原子操作 + 幂等消费 + TTL / 对账机制</strong> → 解决常见超卖、丢单、重复扣减问题。</li></ol><hr><p>✅ <strong>适用场景</strong>：</p><ul><li>秒杀、抢购、大促活动</li><li>高频库存扣减</li><li>需要最终一致性但可容忍短时 Redis 与 MySQL 差异的业务</li></ul><hr><h2 id="_7-非高并发场景下的讨论" tabindex="-1"><a class="header-anchor" href="#_7-非高并发场景下的讨论"><span>7. 非高并发场景下的讨论</span></a></h2><hr><h3 id="_7-1-实现方案" tabindex="-1"><a class="header-anchor" href="#_7-1-实现方案"><span>7.1 实现方案</span></a></h3><p>如果不是高并发场景，那么系统对瞬时流量压力要求不高，可以简化 Redis 预扣和异步落库的复杂性，直接以 <strong>MySQL 为权威存储</strong>，减少不必要的中间层。以下是最佳实践思路：</p><hr><ol><li>核心原则</li></ol><ul><li><strong>MySQL 直接处理库存与订单</strong>： <ul><li>在下单接口直接操作 MySQL 库存表和订单表。</li><li>保证事务一致性（库存扣减和订单生成在同一个事务内）。</li></ul></li><li><strong>Redis 可选作为缓存</strong>： <ul><li>用于加速订单查询或库存显示，而不是库存预扣。</li><li>避免了复杂的回滚、MQ、最终一致性问题。</li></ul></li></ul><hr><ol start="2"><li>推荐流程</li></ol><p>顺序流程：</p><ol><li><p><strong>用户请求下单接口</strong></p><ul><li>接口直接调用 Service 层处理订单。</li></ul></li><li><p><strong>MySQL 事务处理</strong></p><ul><li>扣减库存（<code>UPDATE stock SET quantity = quantity - ? WHERE id = ? AND quantity &gt;= ?</code>）</li><li>生成订单记录</li><li>同一事务提交，保证 <strong>原子性</strong>。</li></ul></li><li><p><strong>返回结果</strong></p><ul><li>下单成功或库存不足直接返回</li><li>无需异步消息队列</li></ul></li><li><p><strong>Redis 缓存（可选）</strong></p><ul><li>缓存库存数量或订单状态，用于快速展示</li><li>通过定时刷新或落库后更新，保证缓存一致性即可</li></ul></li><li><p>优势</p></li></ol><ul><li>架构简单：没有 MQ、没有 Redis 回滚机制</li><li>数据强一致：库存和订单在同一 MySQL 事务中，避免超卖/少卖</li><li>可维护性高：适合中小规模或低并发业务</li></ul><ol start="4"><li>技术要点</li></ol><ul><li><strong>事务操作</strong>： <ul><li>扣库存和生成订单放在同一事务，确保原子性</li></ul></li><li><strong>库存判断</strong>： <ul><li>在 SQL 里加条件 <code>quantity &gt;= ?</code> 避免负库存</li></ul></li><li><strong>缓存策略</strong>： <ul><li>可用 Redis 缓存库存/订单，但只作为只读加速，最终权威仍是 MySQL</li></ul></li><li><strong>并发量低，不用 Lua 脚本或 MQ</strong>： <ul><li>因为 MySQL 足够处理流量，架构不复杂</li></ul></li><li><strong>监控与告警</strong>： <ul><li>对库存异常或订单异常进行监控即可，无需复杂补偿逻辑</li></ul></li></ul><hr><ol start="5"><li>总结</li></ol><ul><li><strong>非高并发场景最佳实践</strong>： <ul><li><strong>MySQL 直接扣库存 + 生成订单</strong></li><li><strong>Redis 仅作缓存，可选</strong></li><li><strong>事务保证一致性</strong></li></ul></li><li>优点： <ul><li>简单可靠，数据强一致</li><li>维护成本低，不需要 MQ、回滚机制、异步补偿</li></ul></li><li>缺点： <ul><li>并发量高时容易成为瓶颈，需要再引入 Redis 预扣减 + MQ 异步落库</li></ul></li></ul><h3 id="_7-2-mysql-乐观锁库存扣减-订单生成" tabindex="-1"><a class="header-anchor" href="#_7-2-mysql-乐观锁库存扣减-订单生成"><span>7.2 MySQL 乐观锁库存扣减 + 订单生成</span></a></h3><hr><p><strong>1. 场景概述</strong></p><ul><li>适用于 <strong>非高并发或中等并发场景</strong>。</li><li>用户下单时，需要保证 <strong>库存不被超卖</strong>。</li><li>MySQL 作为权威存储，订单和库存在同一事务内保证一致性。</li><li>乐观锁通过 <strong>版本号</strong> 实现并发冲突检测。</li></ul><hr><p><strong>2. 数据表设计</strong></p><p>库存表（stock）</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> stock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">BIGINT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    product_id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">BIGINT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    quantity </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    version</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NOT NULL</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> DEFAULT</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    updated_at </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">TIMESTAMP</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> DEFAULT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CURRENT_TIMESTAMP </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ON UPDATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CURRENT_TIMESTAMP</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>订单表（order_info）</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> order_info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">BIGINT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    order_no </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VARCHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">UNIQUE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    user_id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">BIGINT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    product_id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">BIGINT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    quantity </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    status</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> VARCHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> DEFAULT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;PENDING&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    created_at </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">TIMESTAMP</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> DEFAULT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CURRENT_TIMESTAMP</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>3. 核心流程</strong></p><ol><li><p><strong>用户请求下单</strong> → 调用下单接口</p></li><li><p><strong>读取库存及版本号</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> quantity, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">version</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> stock</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> product_id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> \${productId};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>\${productId}</code> → 对应商品 ID 变量</p></li><li><p><strong>判断库存是否足够</strong></p><ul><li>库存不足 → 返回失败</li><li>库存足够 → 尝试扣减库存</li></ul></li><li><p><strong>使用乐观锁更新库存</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">UPDATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> stock</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> quantity </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> quantity - \${purchaseQuantity},</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    version</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    updated_at </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CURRENT_TIMESTAMP</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> product_id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> \${productId}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  AND</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> version</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> \${currentVersion}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> quantity </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> \${purchaseQuantity};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>\${purchaseQuantity}</code> → 本次购买数量</li><li><code>\${currentVersion}</code> → 查询库存时读取的版本号</li><li><code>\${productId}</code> → 商品 ID</li><li>返回影响行数 = 1 → 扣减成功</li><li>返回影响行数 = 0 → 扣减失败，表示冲突或库存不足</li></ul></li><li><p><strong>生成订单</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INSERT INTO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> order_info (order_no, user_id, product_id, quantity, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, created_at)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VALUES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;\${orderNo}&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, \${userId}, \${productId}, \${purchaseQuantity}, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;PENDING&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, CURRENT_TIMESTAMP);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>\${orderNo}</code> → 全局唯一订单号</li><li><code>\${userId}</code> → 下单用户 ID</li><li><code>\${productId}</code> → 商品 ID</li><li><code>\${purchaseQuantity}</code> → 购买数量</li></ul></li><li><p><strong>提交事务</strong></p><ul><li>成功 → 返回下单成功</li><li>失败 → 回滚库存（可选重试或提示库存不足）</li></ul></li></ol><hr><p><strong>4. 流程时序图</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>用户请求下单</span></span>
<span class="line"><span>      │</span></span>
<span class="line"><span>      ▼</span></span>
<span class="line"><span>读取库存 + 版本号</span></span>
<span class="line"><span>      │</span></span>
<span class="line"><span>      ▼</span></span>
<span class="line"><span>判断库存是否足够</span></span>
<span class="line"><span>      │</span></span>
<span class="line"><span>      ▼</span></span>
<span class="line"><span>尝试使用乐观锁更新库存</span></span>
<span class="line"><span> ┌───────────────┐</span></span>
<span class="line"><span> │ 更新成功      │ ──&gt; 生成订单 -&gt; 提交事务 -&gt; 返回成功</span></span>
<span class="line"><span> └───────────────┘</span></span>
<span class="line"><span> ┌───────────────┐</span></span>
<span class="line"><span> │ 更新失败      │ ──&gt; 重试或返回库存不足</span></span>
<span class="line"><span> └───────────────┘</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>图示说明</p><ol><li>每次扣减库存前，先获取当前版本号。</li><li>更新库存时，通过 <code>WHERE version = ?</code> 保证只有未被修改的库存才能扣减。</li><li>如果更新失败，说明有并发操作发生，可选择重试或直接返回失败。</li><li>订单生成在同一事务内，保证库存扣减与订单创建原子性。</li></ol><p><strong>5. 技术要点</strong></p><ul><li><strong>幂等处理</strong><ul><li>订单号唯一约束，防止重复下单。</li></ul></li><li><strong>库存原子性</strong><ul><li><code>quantity &gt;= ?</code> + <code>version = ?</code> 保证不会出现负库存。</li></ul></li><li><strong>失败重试策略</strong><ul><li>可设置重试次数（如 2~3 次）</li><li>避免无限重试占用数据库资源</li></ul></li><li><strong>事务管理</strong><ul><li>使用数据库事务包裹库存更新 + 订单生成</li><li>保证原子性与一致性</li></ul></li></ul><p><strong>6. 总结</strong></p><ul><li>乐观锁适合 <strong>非高并发或中等并发场景</strong>，简单高效。</li><li>Redis / MQ 可省略，架构更简单。</li><li>核心是 <strong>版本号 + SQL 条件 + 事务</strong>，保证库存与订单一致性。</li></ul><h2 id="_8-方案对比" tabindex="-1"><a class="header-anchor" href="#_8-方案对比"><span>8. 方案对比</span></a></h2><table><thead><tr><th>特性 / 场景</th><th>高并发场景</th><th>非高并发场景</th></tr></thead><tbody><tr><td><strong>核心目标</strong></td><td>防止超卖、应对瞬时流量</td><td>保证库存一致性即可，性能压力低</td></tr><tr><td><strong>库存操作方式</strong></td><td>Redis 预扣库存（Lua 原子操作）</td><td>MySQL 事务直接扣库存</td></tr><tr><td><strong>订单处理</strong></td><td>异步落库 MySQL，通过 RocketMQ 消息队列</td><td>同步落库 MySQL（库存扣减 + 订单生成同一事务）</td></tr><tr><td><strong>缓存使用</strong></td><td>Redis 做库存预扣和缓存</td><td>Redis 可选，仅做展示/加速查询</td></tr><tr><td><strong>并发控制</strong></td><td>Redis Lua 原子操作 + 消息队列幂等消费</td><td>MySQL 乐观锁（版本号）即可</td></tr><tr><td><strong>事务与一致性</strong></td><td>MySQL 为权威，Redis 仅削峰；最终一致性通过 MQ + 回滚机制保证</td><td>MySQL 事务保证原子性，一致性强</td></tr><tr><td><strong>回滚机制</strong></td><td>必须：MQ 异步回滚库存、超时释放库存、定时校验</td><td>可选：事务失败直接回滚，无需 MQ</td></tr><tr><td><strong>架构复杂度</strong></td><td>高：涉及 Redis、RocketMQ、异步处理、回滚机制</td><td>低：只涉及 MySQL，事务保证原子性</td></tr><tr><td><strong>适用场景</strong></td><td>秒杀、大促、限量抢购、高并发抢购场景</td><td>普通下单、库存量大、并发压力低的场景</td></tr><tr><td><strong>优点</strong></td><td>高性能、高并发下防超卖、削峰</td><td>简单可靠、维护成本低、强一致性</td></tr><tr><td><strong>缺点</strong></td><td>架构复杂、实现成本高、最终一致性容忍短暂不一致</td><td>并发量大时可能成为瓶颈，不能承受瞬时高流量</td></tr></tbody></table>`,75)),e(i,{code:"eJyFUk1PE1EU3fMr7oaVYTHzAzRAWyApRgquJsRUWoRoqCkQYxgT2qhMwTKjLU2DtU2hLSZaRgJp6Zf8FzP39c2qf8E380Zm5PPtZu4995xzz118FXuzsBSOr0EwNATsDQ8DNmvG76NBd9/8kcdWA9XPJNciZcWur64/fxEPv16Cm4rWGxWkfvY7UZpUb5KTpHG+g+k9sltF9XAeRkYewpgghaKR5VUwD96T1CG2M1jPD7pKcD0MuFvCukYyaaNXGHRT85dTxwQLK1v9WypRNNwuyTAuSIzf3EzQ4wOLpKGQhI7KLwjFFl5G16ZnXPy4jQcfQ3STpF5lvfSsRTc/UK3HFMD029mZoNvuc+gcIj+DHX9iX9c6sHJCz6oyBP5Jwa9F0tnnUuDPxy/AvdJylRu9Zon/Ns7TtHEqw4Qg0YssG8L3xsdzTHQlMnQZkXrqRPSteHdKN9ftoMT7ghIlqndQzXGJ8AD6KYUUfqLaZHHZG/s/I9FjiOR11GrME1ZKj1hU4gYqFZKrv3Mjcdq1mgw+RnWLbU8rm8myECWjd8GUGy2NHiXNbAKePvGNzvmBH8fVNfsdrOdymJ6AuNHvZEix4OoJePRMiJK5lab6HlFyXJg3Jne4g7GFTVr7LDEGfo0w9XjWH5qDWDwSjT9bXlmMubBJGwZTokRUzWhXjPYObpftc/Gugat10/8Ls7rDOg=="})])}const c=n(p,[["render",r]]),g=JSON.parse(`{"path":"/zh/development/backend/%E3%80%90JAVA%E3%80%91%E3%80%90DB%E3%80%91%E3%80%90MQ%E3%80%91%E5%BA%93%E5%AD%98%E9%A2%84%E6%89%A3%20_%20MySQL%20%E6%9C%80%E7%BB%88%E8%90%BD%E5%BA%93%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88%EF%BC%88Java%20_%20Redis%20_%20RocketMQ%EF%BC%89.html","title":"【JAVA】【DB】【MQ】库存预扣 + MySQL 最终落库技术方案（Java + Redis + RocketMQ）","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-08-25T00:00:00.000Z","category":["后端"],"tag":["DB","MQ"],"description":"【JAVA】【DB】【MQ】库存预扣 + MySQL 最终落库技术方案（Java + Redis + RocketMQ） 1. 背景与场景 在电商秒杀或大促场景中： 单品库存有限，高并发请求可能瞬间打爆数据库。 订单生成与库存扣减必须保证一致性，否则可能出现 超卖/少卖。 Redis 提供高性能内存操作，是库存预扣的理想选择，但不适合作为权威数据源。 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【JAVA】【DB】【MQ】库存预扣 + MySQL 最终落库技术方案（Java + Redis + RocketMQ）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-25T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-30T05:54:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kepler452Byte\\",\\"url\\":\\"https://kepler452byte.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://kepler452byte.github.io/zh/development/backend/%E3%80%90JAVA%E3%80%91%E3%80%90DB%E3%80%91%E3%80%90MQ%E3%80%91%E5%BA%93%E5%AD%98%E9%A2%84%E6%89%A3%20_%20MySQL%20%E6%9C%80%E7%BB%88%E8%90%BD%E5%BA%93%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88%EF%BC%88Java%20_%20Redis%20_%20RocketMQ%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"Kepler452Byte's Blog"}],["meta",{"property":"og:title","content":"【JAVA】【DB】【MQ】库存预扣 + MySQL 最终落库技术方案（Java + Redis + RocketMQ）"}],["meta",{"property":"og:description","content":"【JAVA】【DB】【MQ】库存预扣 + MySQL 最终落库技术方案（Java + Redis + RocketMQ） 1. 背景与场景 在电商秒杀或大促场景中： 单品库存有限，高并发请求可能瞬间打爆数据库。 订单生成与库存扣减必须保证一致性，否则可能出现 超卖/少卖。 Redis 提供高性能内存操作，是库存预扣的理想选择，但不适合作为权威数据源。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-30T05:54:56.000Z"}],["meta",{"property":"article:tag","content":"MQ"}],["meta",{"property":"article:tag","content":"DB"}],["meta",{"property":"article:published_time","content":"2025-08-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-30T05:54:56.000Z"}]]},"git":{"createdTime":1756533296000,"updatedTime":1756533296000,"contributors":[{"name":"sx-yuanhong.shao","username":"","email":"sx-yuanhong.shao@clickzetta.com","commits":1}]},"readingTime":{"minutes":11.06,"words":3317},"filePathRelative":"zh/development/backend/【JAVA】【DB】【MQ】库存预扣 + MySQL 最终落库技术方案（Java + Redis + RocketMQ）.md","excerpt":"\\n<aside>\\n💡\\n<ol>\\n<li>请求提交订单接口与库存预扣减的关系</li>\\n</ol>\\n<p>在典型的 <strong>Redis 预扣库存 + MySQL 最终落库</strong>架构中：</p>\\n<ol>\\n<li><strong>用户请求提交订单接口（下单接口）</strong>：\\n<ul>\\n<li>是用户触发整个下单流程的入口。</li>\\n<li>接口会执行 <strong>库存预扣减</strong>，但不是简单写 Redis，而是有完整业务逻辑和幂等处理。</li>\\n</ul>\\n</li>\\n<li><strong>库存预扣减时机</strong>：\\n<ul>\\n<li><strong>在接口内部立即调用 Redis 扣减库存</strong>，保证高并发下库存不被超卖。</li>\\n<li>如果 Redis 扣减失败（库存不足），直接返回下单失败。</li>\\n</ul>\\n</li>\\n<li><strong>顺序流程</strong>：\\n<ol>\\n<li>用户请求下单接口</li>\\n<li>Redis Lua 原子扣减库存\\n<ul>\\n<li>库存不足 → 返回失败</li>\\n<li>库存充足 → 扣减成功</li>\\n</ul>\\n</li>\\n<li>生成订单消息 → 发送 RocketMQ</li>\\n<li>消费者异步落库 MySQL\\n<ul>\\n<li>成功 → 完成</li>\\n<li>失败 → 发送回滚消息 → Redis 补库存</li>\\n</ul>\\n</li>\\n</ol>\\n</li>\\n</ol>\\n<hr>\\n<p><strong>2. 设计原则</strong></p>\\n<ul>\\n<li><strong>Redis 扣减库存要在下单接口内立即完成</strong>\\n<ul>\\n<li>确保并发情况下库存安全</li>\\n<li>接口响应时间快（Redis 原子操作很快）</li>\\n</ul>\\n</li>\\n<li><strong>落库是异步的</strong>\\n<ul>\\n<li>不阻塞接口返回</li>\\n<li>通过 MQ 异步保证最终一致性</li>\\n</ul>\\n</li>\\n<li><strong>接口层只负责触发预扣和消息投递</strong>\\n<ul>\\n<li>业务权威存储仍在 MySQL</li>\\n<li>异常回滚、超时释放库存由消费者/定时任务处理</li>\\n</ul>\\n</li>\\n</ul>\\n<hr>\\n<ol start=\\"3\\">\\n<li>核心结论</li>\\n</ol>\\n<p>✅ <strong>用户下单接口确实是库存预扣减的触发点</strong></p>\\n<ul>\\n<li>下单接口先在 Redis 扣减库存</li>\\n<li>然后异步落库 MySQL</li>\\n<li>回滚、超时释放库存通过<strong>消息队列或定时任务处理</strong></li>\\n</ul>\\n</aside>","autoDesc":true}`);export{c as comp,g as data};
